package Java;

public class a26_class {
	/*
	 * 객체 지향 크로그래밍(OOP, Object-Oriented Programming)
	 * 모든 데이터를 객체(object)로 취급하며, 이러한 객체가 바로 프로그래밍의 중심이 됨
	 * 객체란 간단히 이야기하자면 실생활에서 우리가 인식할 수 있는 사물로 설명할 수 있음
	 * 이러한 객체의 상태(state)와 행동(behavior)을 구체화하는 형태의 프로그래밍이 바로 객체 지향 프로그래밍
	 * 이때 객체를 만들어 내기 위한 설계도와 같은 개념을 클래스라고 함
	 * 
	 * 클래스(class)
	 * 객체를 정의하는 틀 또는 설계도와 같은 의미로 사용됨
	 * 자바에서는 이러한 설계도인 클래스를 가지고, 여러 객체를 생성하여 사용하게 됨
	 * 클래스는 객체의 상태를 나타내는 필드(field)와 객체의 행동을 나타내는 메소드(method)로 구성됨
	 * 즉, 필드(field)란 클래스에 포함된 변수(variable)을 의미
	 * 또한, 메소드(method)란 어떠한 특정 작업을 수행하기 위한 명령문의 집합
	 * 
	 * 인스턴스(instance)
	 * 자바에서 클래스를 사용하기 위해서는 우선 해당 클래스 타입의 객체(object)를 선언해야함
	 * 이렇게 클래스로부터 객체를 선언하는 과정을 클래스의 인스턴스화라고 함
	 * 또한, 이렇게 선언된 해당 클래스 타입의 객체를 인스턴스라고함
	 * 즉, 인스턴스란 메모리에 할당된 객체를 의미함
	 * 자바에서는 하나의 클래스로부터 여러 개의 인스턴스를 생성할 수 있음
	 * 이렇게 생성된 인스턴스는 독립된 메모리 공간에 저장된 자신만의 필드를 가질 수 있음
	 * 하지만 해당 클래스의 모든 메소드는 해당 클래스에서 생성된 모든 인스턴스가 공유하게 됨
	 * 
	 * 메소드(method)
	 * 자바에서 클래스는 멤버로 속성을 표현하는 필드와 기능을 표현하는 메소드를 가짐
	 * 그중 메소드란 어떠한 특정 작업을 수행하기 위한 명령문의 집합이라 할 수 있음
	 * 	문법
	 * 	접근제어자 반환타입 메소드이름(매개변수목록){	// 선언부
	 * 		// 구현부
	 * 	}
	 * 	
	 * 	1. 접근 제어자 : 해당 메소드에 접근할 수 있는 범위를 명시
	 * 	2. 반환 타입(return type) : 메소드가 모든 작업을 마치고 반환하는 데이터의 타입을 명시함
	 * 	3. 메소드 이름 : 메소드를 호출하기 위한 이름을 명시
	 * 	4. 매개변수 목록(parameters) : 	메소드 호출 시에 전달되는 인수의 값을 저장할 변수들을 명시
	 * 	5. 구현부 : 메소드의 고유 기능을 수행하는 명령문의 집합
	 * 
	 * 자바에서는 하나의 클래스에 같은 이름의 메소드를 둘 이상 정의할 수 없음
	 * 하지만 메소드 오버로딩(overloading)을 이용하면, 같은 이름의 메소드를 중복하여 정의할 수 있음
	 * 메소드 오버로딩이란 매개변수의 개수나 타입을 다르게 하여 같은 이름의 또 다른 메소드를 작성하는 것
	 * 이러한 메소드 오버로딩을 사용함으로써 메소드에 사용되는 이름을 절약할 수 있음
	 * 또한, 메소드를 호출할 때 전달해야 할 매개변수의 타입이나 개수에 대해 크게 신경을 쓰지 않고 호출할 수 있게 됨
	 */
}
