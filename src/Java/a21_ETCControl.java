package Java;

public class a21_ETCControl {
	/*
	 * 기타 제어문
	 * 
	 * 루프의 제어
	 * 일반적으로 조건식의 검사를 통해 루프로 진입하면, 다음 조건식을 검사하기 전까지 루프안에 있는 모든 명령문을 실행
	 * 하지만 continue문과 break문은 이러한 일반적인 루프의 흐름을 사용자가 직접 제어할 수 있도록 도와줌
	 * 	continue문
	 * 	루프 내에서 사용하여 해당 루프의 나머지 부분을 건너뛰고, 바로 다음 조건식의 판단으로 넘어가게 해줌
	 * 	보통 반복문 내에서 특정 조건에 대한 예외 처리를 하고자 할 때 자주 사용됨
	 * 
	 * 	break
	 * 	루프 내에서 사용하여 해당 반복문을 완전히 종료시킨 뒤, 반복문 바로 다음에 위치한 명령문을 실행
	 * 	즉 루프 내에서 조건식의 판단 결과와 상관없이 반복문을 완전히 빠져나가고 싶을 때 사용
	 * 
	 * 이름을 가지는 반복문(break with label)
	 * 일반적인 break문은 단 하나의 반복문만을 빠져나가게 해줌
	 * 따라서 여러 반복문이 중첩된 상황에서 한 번에 모든 반복문을 빠져나가거나, 특정 반복문까지만 빠져나가고 싶을 때는 다른방법을 사용
	 * 이때 사용할 수 있는 방법이 바로 반복문에 이름(label)을 설정하는 것
	 * 가장 바깥쪽 반복문이나 빠져나가고 싶은 특정 반복문에 이름을 설정한 후 break키워드 다음에 해당 이름을 명시하면 됨
	 * 그러면 해당 break 키워드는 현재 반복문이 아닌 해당 이름의 반복문 바로 다음으로 프로그램의 실행을 옮겨줌
	 * 단, 이때 이름(label)은 가리키고자 하는 반복문의 키워드 바로 앞에 위치해야함
	 * 이름과 반복문의 키워드 사이에 명령문이 존재하면, 자바 컴파일러는 오류를 발생
	 * 예제
	 * 	allLoop:
			for(int i=2; i<10; i++) {
				for(int j=2; j<10; j++) {
					if(i == 5) break allLoop;
					System.out.println(i + " * " + j + " = " + (i*j));
				}
			}
	 * 	
	 */
}
