package DataStructure;

public class ListInterface {
	/*
	 * List인터페이스에서 지원하는 클래스들의 공통점과 차이점
	 * 	공통점
	 * 	1. 동일한 특성의 데이터들을 묶음
	 * 	2. 반복문내에 변수를 이용하여 하나의 묶음 데이터들을 모두 접근할 수 있음
	 * 
	 * 	차이점 - 배열
	 * 	1. 처음 선언한 배열의 크기(길이)는 변경할 수 없음. 정적 할당(static allocation)
	 * 	2. 메모리에 연속적으로 나열되어 할당됨
	 * 	3. index에 위치한 하나의 데이터를 삭제하더라도 해당 index에는 빈공간으로 계속 남음
	 * 
	 * 	차이점 - 리스트
	 * 	1. 길이가 가변적이다. 동적할당(dynamic allocation)
	 * 	2. 데이터들이 연속적으로 나열됨(메모리에 연속적으로 나열되지 않고 각 데이터들은 주소(reference)로 연결되어있음. C의 포인터라고 생각)
	 * 	3. 데이터 사이에 빈 공간을 허용하지 않음
	 * 
	 * 배열
	 * 	장점
	 * 	1. 데이터의 크기가 정해져있을 경우 메모리 관리가 편함
	 * 	2. 메모리에 연속적으로 나열되어 할당하기 때문에 index를 통한 색인(접근)속도가 빠름
	 * 
	 * 	단점
	 * 	1. 배열의 크기를 변경할 수 없음
	 * 	2. 빈 공간을 허용하지 않고 데이터를 삽입, 삭제 하고자 하면 속도가 느려 삽입, 삭제가 빈번한 경우에는 유용하지 않음
	 * 
	 * 리스트
	 * 	장점
	 * 	1. 메모리를 동적 할당해주기 때문에 메모리 관리가 편함
	 * 	2. 빈 공간을 허용하지 않기 때문에 데이터 관리에도 편함
	 * 	3. 포인터(주소)로 각 데이터들이 연결되어 있기 때문에 해당 데이터에 연결된 주소만 바꿔주면 되기 때문에 삽입, 삭제에 용이(ArrayList는 예외)
	 * 
	 * 	단점
	 * 	1. 객체로 데이터를 다루기 때문에 적은 양의 데이터만 쓸 경우 배열에 비해 차지하는 메모리가 커짐
	 * 	2. 기본적으로 주소를 기반으로 구성되어있고 메모리에 순차적으로 할당하는 것이 아니기 때문에 색인 능력이 떨어짐
	 */
}
